<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Scott Radcliff</title>
 <link href="http://scottradcliff.com/atom.xml" rel="self"/>
 <link href="http://scottradcliff.com/"/>
 <updated>2011-02-15T11:31:53-05:00</updated>
 <id>http://scottradcliff.com/</id>
 <author>
   <name>Scott Radcliff</name>
   <email>scott@scottradcliff.com</email>
 </author>

 
 <entry>
   <title>A Win for Technology</title>
   <link href="http://scottradcliff.com/2011/02/15/a-win-for-technology/"/>
   <updated>2011-02-15T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2011/02/15/a-win-for-technology</id>
   <content type="html">&lt;p&gt;I sat with my family and watched Watson, &lt;em&gt;the computer &lt;span class=&quot;caps&quot;&gt;IBM&lt;/span&gt; created&lt;/em&gt;, compete on Jeopardy and we were in awe of the awesome. This really was historic, not to mention a genius move by &lt;span class=&quot;caps&quot;&gt;IBM&lt;/span&gt;. Why was it genius by &lt;span class=&quot;caps&quot;&gt;IBM&lt;/span&gt;?&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The country saw &lt;span class=&quot;caps&quot;&gt;IBM&lt;/span&gt; exercise their motto &amp;#8220;Build a smarter planet&amp;#8221;. Even though through the first round Watson stumbled a bit, it was impressive how this machine could parse and answer human language.&lt;/li&gt;
	&lt;li&gt;Non-technical people had the opportunity to see the people that were behind the machine. This is something that normal people often do not see. Most people just expect computers to work, never giving a thought to who built it, or how much time went into it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Those two points can stand on their own, but I think the most impressive thing about Watson is what it leads to after Jeopardy. Possibilities in various fields were mentioned, including the medical field. That is the most impressive part. What technology will be spawned from a game?&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mental Rest</title>
   <link href="http://scottradcliff.com/2011/02/10/mental-rest/"/>
   <updated>2011-02-10T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2011/02/10/mental-rest</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve been thinking about mental rest a lot. I know I could benefit from letting my brain relax. My brain is running full speed all day. There&amp;#8217;s always a monitor running where I&amp;#8217;m debugging something, reading something, researching something, so on and so on. When the work day is over, I grab my iPad and do the same thing. It&amp;#8217;s hard not to be engaged in something with my schedule. Day job, part-time night job, and finishing up a degree at a University make it difficult to do &amp;#8220;nothing&amp;#8221;.&lt;/p&gt;
&lt;p&gt;For the next week, I am going to set a side a block of time each day to relax. No studying, no programming/debugging, no research; just relax. Probably just listen to some music. I expect to feel completely refreshed. I also think that all the information that I have been cramming into my brain will finally have a chance to sink in. If all goes well, I will post my thoughts.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Moving the Mobile Web Forward</title>
   <link href="http://scottradcliff.com/2011/02/02/moving-the-mobile-web-forward/"/>
   <updated>2011-02-02T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2011/02/02/moving-the-mobile-web-forward</id>
   <content type="html">&lt;p&gt;I have this love/hate relationship with native mobile apps. They definitely have their place, but are often overused; I&amp;#8217;m a huge  proponent of the mobile web. I think as developers, we should build apps not for a platform, but for a purpose. More often than not, this involves more than one platform. Games are exempt in my opinion. Native code is a perfect fit for games.&lt;/p&gt;
&lt;p&gt;37signals just released a &lt;a href=&quot;http://basecamphq.com/mobile&quot;&gt;mobile version of Basecamp&lt;/a&gt;. It&amp;#8217;s a great app, and done purely in web technologies. This is a giant leap forward for a few reasons. One: some devs that are on the fence about mobile might look at this app and realize that it&amp;#8217;s okay to go web versus native. Two: the crew at 37signals are creating quite a stir about their Cinco framework, which appears to be a rapid application framework for web apps, and will be open sourced&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m anxiously waiting for the release of Cinco. I have been looking for a mobile web solution and was entertaining the idea of creating my own micro framework. Maybe something based on Sinatra, but I would rather contribute to something that has the talent that 37signals brings behind it.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Promote Dry JavaScript Practices</title>
   <link href="http://scottradcliff.com/2011/02/01/promote-dry-javascript/"/>
   <updated>2011-02-01T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2011/02/01/promote-dry-javascript</id>
   <content type="html">&lt;p&gt;I’ve griped about jQuery plenty. Not the framework itself, it’s an awesome tool to have when doing front end work, but the code that many produce with jQuery. I like to call it &lt;em&gt;anonymous functionitis&lt;/em&gt;. New developers see anonymous functions in jQuery code, assume &lt;em&gt;everything&lt;/em&gt; should be done that way, and create code that doesn’t promote reuse. The code is full of functions that serve one purpose and need to be recreated if they are needed elsewhere. Another thing that bugs me is throwing everything in &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt; ready. I mark this up as inexperience.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.rebeccamurphey.com/&quot;&gt;Rebecca Murphy&lt;/a&gt; has done a nice job of summing this up in her JS Conf talk &lt;a href=&quot;http://jsconf.eu/2010/speaker/the_jquery_divide_by_rebecca_m.html&quot;&gt;The jQuery Divide&lt;/a&gt;. I think she is right; we need to educate those that write poor jQuery. But how?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Teach the need to understand what jQuery is doing. New developers should dig into the code and learn how jQuery does what it does.&lt;/li&gt;
	&lt;li&gt;Promote writing JavaScript without jQuery.&lt;/li&gt;
	&lt;li&gt;Take a part of JavaScript (event handlers, animations, Ajax) and really explain how it works.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If those of us that understand the language, help teach those that do not, maybe we can  move the developer community forward.  With event driven JavaScript gaining speed, there hasn’t been a better time to promote the core language.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Project Portfolio</title>
   <link href="http://scottradcliff.com/2011/01/31/project-portfolio/"/>
   <updated>2011-01-31T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2011/01/31/project-portfolio</id>
   <content type="html">&lt;p&gt;Listening to the &lt;a href=&quot;http://www.pragprog.com/podcasts&quot;&gt;Pragmatic Podcast&lt;/a&gt; recently, I picked up on the term &lt;em&gt;Project Portfolio&lt;/em&gt; and it got me thinking. What if, instead of trying to show what I have worked on for client work; which is usually behind an &lt;span class=&quot;caps&quot;&gt;NDA&lt;/span&gt; or some other form of agreement that prevents me from showing or claiming anything, I would just publish everything that I build locally. All the little todo apps, note taking apps, etc. All of them published on the web.&lt;/p&gt;
&lt;p&gt;I never really liked the idea of a portfolio. What a time consuming pain. I mean I see the need for a professional portfolio; accolades, awards, letters of recommendation, etc. But a web portfolio is a time sucker and a blind display of work. I have no idea if the urls are active anymore. I guess I could host a local copy of the site in some circumstances, but then it may not match the actual site. What if the client changes script/images/etc.. Then I really don’t have any control. What a pain. I have never been a fan of them.&lt;/p&gt;
&lt;p&gt;My personal projects on the other hand, are a labor of love. These are the apps I use almost daily. I continually improve and tweak them. If I really think about it, this is where my best work is at. This is where I experiment, try new technologies, optimize for speed,  so on and so on. I’m really thinking about starting a projects section and throwing up all my projects on there. Publishing more was a goal this year, sounds like a good way to get started.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Whoa, search any site with Chrome</title>
   <link href="http://scottradcliff.com/2011/01/19/searching-with-chrome/"/>
   <updated>2011-01-19T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2011/01/19/searching-with-chrome</id>
   <content type="html">&lt;p&gt;This may be something new, but I stumbled onto something today. Apparently you can search some websites in Chrome directly from the address bar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/search_chrome.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When you add a space after the &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;, you can then search the site for what you need. Completely awesome for finding Gems on GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/search_github.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Learning Web Design</title>
   <link href="http://scottradcliff.com/2011/01/18/learning-web-design/"/>
   <updated>2011-01-18T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2011/01/18/learning-web-design</id>
   <content type="html">&lt;p&gt;As long as I can remember w3schools have been around and honestly I had no idea that it was not part of the official W3C. Recently a movement has been started to bring awareness that the information at w3schools is inaccurate and that the wrong information is worse than no information. While I do agree that information should be accurate, I wonder where new designers and developers to web design will get their information. Surely we can’t expect them to go through the actual documentation. Even seasoned pros find that painful to sift through.&lt;/p&gt;
&lt;p&gt;W3schools helped me quite a bit starting out. I don’t think the name was as much of a factor as the content. Even the fact that some of the content was inaccurate didn’t hurt me when I was starting out. It helped me get started quickly; as I learned more I expanded my resources.&lt;/p&gt;
&lt;h2&gt;Where should a person go to learn the syntax for making web sites?&lt;/h2&gt;
&lt;p&gt;I have spent some time searching for a suitable replacement. There isn’t one. Okay, let me rephrase that; there isn’t a &lt;strong&gt;&lt;em&gt;good&lt;/em&gt;&lt;/strong&gt; one. There are plenty of resources available, but they are fragmented at best. If someone that has experience is looking for documentation and knows what they are looking for, these resources work. But what about the person that doesn’t know what they are looking for? That person only knows that they want to do it the &lt;em&gt;right way&lt;/em&gt;; the web standards way. Where do they go?&lt;/p&gt;
&lt;h2&gt;It’s time to build a better system&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://w3fools.com/&quot;&gt;http://w3fools.com/&lt;/a&gt; makes mention of the community building a better system, but then shies away from the idea as if it is not possible. I believe it’s wrong to shy away from it. If we as a community are going to call an organization out because they have inaccurate information, we &lt;strong&gt;have&lt;/strong&gt; to build something better.&lt;/p&gt;
&lt;h2&gt;Initial ideas&lt;/h2&gt;
&lt;p&gt;Here is what I think the new system has to have&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;A way to see immediate results with the code you are looking for. This is the one thing that I loved about w3schools; I could get immediate feedback with what happens when I do [x]. Those little text editors are a great learning tool.&lt;/li&gt;
	&lt;li&gt;Up to date documents that are completely searchable. I think &lt;a href=&quot;http://apidock.com/&quot;&gt;http://apidock.com/&lt;/a&gt; does this well. As does &lt;a href=&quot;http://railsapi.com/doc/rails-v3.0.3/&quot;&gt;http://railsapi.com/doc/rails-v3.0.3/&lt;/a&gt;. Something like that would be great, but with full text search.&lt;/li&gt;
	&lt;li&gt;Newbie friendly.&lt;/li&gt;
	&lt;li&gt;Editable. Similar to a wiki. I think this helps avoid the outdated problem, but raises another one in sources. Sources would have to be displayed for it to be credible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That would be a good start. I certainly couldn’t do it myself, but would be willing to jump in and help. I just can’t see complaining about something without action.&lt;/p&gt;
&lt;p&gt;If someone has already started something, I would love to hear about it and participate.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Automating Tasks</title>
   <link href="http://scottradcliff.com/2011/01/05/automating-tasks/"/>
   <updated>2011-01-05T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2011/01/05/automating-tasks</id>
   <content type="html">&lt;p&gt;I am experimenting with automating more tasks. I’m starting with my login for work. Every morning when I fire up my machine for work, I start a few programs. It’s not really a big deal, but I decided to venture into shell scripting to make this a command. My shell scripting skills currently suck.&lt;/p&gt;
&lt;p&gt;The script is held in my code/helpers directory, so it needs to set the working directory to Applications so I can launch the apps I need. Once in the directory, I just launch the applications that I launch every morning.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# Open apps for work&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;cd ~/../../Applications;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open &quot;Google Chrome.app&quot;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;open Skype.app&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;open Mail.app&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;open TextMate.app&lt;/code&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Developer Goals for 2011</title>
   <link href="http://scottradcliff.com/2010/12/29/developer-goals-for-2011/"/>
   <updated>2010-12-29T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/12/29/developer-goals-for-2011</id>
   <content type="html">&lt;p&gt;As the end of the year approaches, like most people, I start to reflect on the year that is set to expire. This year was an interesting one. I have the first full year of teaching under my belt, I starting working for a company as a developer, and I have evolved as a developer more than in any other year.&lt;/p&gt;
&lt;h2&gt;Where Am I now?&lt;/h2&gt;
&lt;p&gt;As I write this, I happen to be on a bit of a break. Usually, I am working either 7-4 or 8-5 and I teach from 5:40 until 9:30 &amp;#8211; 10ish twice a week. Besides that, I am finishing my degree at &lt;a href=&quot;http://www.bgsu.edu/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;BGSU&lt;/span&gt;&lt;/a&gt;. Needless to say, I have a very full plate, but it’s all fun. Okay, the finishing the degree part kind of sucks, but that is more likely due to the content of the courses than the actual work.&lt;/p&gt;
&lt;p&gt;I have really grown in all aspects of work. Well, it’s not really work most of the time; I really do enjoy it. Teaching is a great way for me to give back to the community. I love helping prepare web designers with tools and skills that they will actually use. I think I have improved in my teaching style, but ultimately the students would have to answer that. I know I have benefitted from my education at BG to improve the environment that I create for learning.&lt;/p&gt;
&lt;h3&gt;Developer Status&lt;/h3&gt;
&lt;p&gt;As for being a developer, I have learned a lot from working with other developers. I still find it amazing how much I can learn from just being around other developers. It’s something every developer should do. Not only through work, but through play also. Hanging out with like-minded developers is incredibly inspiring.&lt;/p&gt;
&lt;p&gt;I still struggle with developer speed. I hate doing things that are “good enough”. Because of that, I spend a lot of time tweaking and refactoring when I probably should learn to just close the file and move on. This is probably the one area I need to work on. More on that later.&lt;/p&gt;
&lt;h3&gt;Frameworks&lt;/h3&gt;
&lt;p&gt;Frameworks were a big part of my 2010. Up until this year, I started every project from scratch; that included &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt;, JavaScript, and &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;. &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; frameworks came first; mainly &lt;a href=&quot;http://codeigniter.com/&quot;&gt;CodeIgniter&lt;/a&gt;, then came the JavaScript frameworks, finally settling on &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;. Recently, I have been using &lt;a href=&quot;http://www.blueprintcss.org/&quot;&gt;BlueprintCSS&lt;/a&gt; for common &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; layouts. I started to feel that it was insane to replicate the same layouts over and over. Blueprint fits my workflow well and hopefully makes me a little faster.&lt;/p&gt;
&lt;p&gt;This year also brought on &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt;, and it blew me away. I slowly started moving away from &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt;. My day job still requires &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt;, but for anything I start outside of work; Rails it is. Rails has really helped me grow as a developer. I started looking at my code with a test first mentality. The conventions in Rails almost force me to do things in a certain way. I have become accustomed to the &amp;#8220;Rails Way&amp;#8221;.&lt;/p&gt;
&lt;h2&gt;Where Would I Like to be?&lt;/h2&gt;
&lt;p&gt;There are a few goals that I have for the coming year. Naturally, I want improve in all aspects of developing and teaching. As I mentioned earlier, speed is my largest defect.  What I have yet to figure out is whether I am taking too long because I am adding quality code, or if the time if takes me is necessary to produce quality code. This will be a large turning point for me this year. I plan on concentrating on speed a lot, I still believe that web development is a creative craft that requires knowledge, experience, creativity, and pride. I try to treat every line of code as if it were my personal project. I definitely would not cut corners on something I am building for myself. I do not want to sacrifice that quality for speed, but fear that I have to make a compromise.&lt;/p&gt;
&lt;p&gt;I also have a lot of half finished side projects laying around. I am going to make this the year I just release projects. They could be anything. I am no longer concerned with if what I am building has been done or not. Often, what I am building does exist, but does not fit what I want it to do enough.&lt;/p&gt;
&lt;p&gt;Developers are encouraged to learn one new language a year. I do agree with this, it&amp;#8217;s a great way to stay on top of your craft. I am approaching 2011 a little differently. I am really concentrating on &lt;a href=&quot;http://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;. I mean really mastering it. All of the ins and outs of the language.&lt;/p&gt;
&lt;p&gt;Sadly, my JavaScript skills have slid in the last few years. I&amp;#8217;m not saying I don&amp;#8217;t know JavaScript well, but the JavaScript development of the past few years has &lt;em&gt;really&lt;/em&gt; moved the language forward and I feel that I am not as good as I could or should be.&lt;/p&gt;
&lt;h3&gt;How Do I Get There?&lt;/h3&gt;
&lt;p&gt;In order to be where I would like to be by the end of 2011, there are a few things that I must do. The first thing is to make time for side projects and personal and professional development. It’s a lot easier said than done while working a full-time, part-time job, and still taking some online classes. I have a few ideas; start work a half an hour early, have a working lunch, work on the projects after work, or just simply limiting all of these social networks I am involved with. If I am going to release projects, code, and such; I need to work on those projects and shut Twitter down.&lt;/p&gt;
&lt;p&gt;Releasing projects that are not perfect is a pain point for anyone in a creative profession. This is item number two. I’m still scared this is going to burn me, but I am going to do it anyway. Burns heal, right?&lt;/p&gt;
&lt;p&gt;I think the best way to advance with a language is to do something meaningful. Hello World and a blog (&lt;em&gt;the new hello world&lt;/em&gt;) only go so far. To really use a technology or language, you need to have useful case for it. Maybe it gets released, maybe it doesn’t. One thing for sure, you learn a lot about how to really use the language. I love the Code Kata ideas, so I plan on rolling my own; creating some katas that are more relevant to me as far as something I might actually use. With any luck, I might stumble onto something. Worst case scenario, I accomplish my goal of really digging into Ruby and JavaScript.&lt;/p&gt;
&lt;p&gt;Here is to a great 2011!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>11 Tips for Better Code</title>
   <link href="http://scottradcliff.com/2010/12/23/tips-for-better-code/"/>
   <updated>2010-12-23T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/12/23/tips-for-better-code</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://progfu.com/post/384161195/11-tips-for-better-code&quot;&gt;http://progfu.com/post/384161195/11-tips-for-better-code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Great tips on code craftsmanship.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Strict Mode in ECMA 5</title>
   <link href="http://scottradcliff.com/2010/12/15/strict-mode-in-ecma/"/>
   <updated>2010-12-15T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/12/15/strict-mode-in-ecma</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/&quot;&gt;Strict Mode is Coming to Town&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Douglas Crockford blogs about using strict mode in ES5. I am not sure how I feel about this yet. I can definitely see some advantages, but didn&amp;#8217;t we try this with &lt;span class=&quot;caps&quot;&gt;XHTML&lt;/span&gt; already? Definitely a topic to research.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Apple Loses Top iOS Dev</title>
   <link href="http://scottradcliff.com/2010/12/10/apple-loses-top-ios-game-developer/"/>
   <updated>2010-12-10T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/12/10/apple-loses-top-ios-game-developer</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://mashable.com/2010/12/09/graeme-devine-leaves-apple/&quot;&gt;http://mashable.com/2010/12/09/graeme-devine-leaves-apple/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Testament to the fact that money isn&amp;#8217;t everything. Do what you love.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Head.js</title>
   <link href="http://scottradcliff.com/2010/12/04/headjs/"/>
   <updated>2010-12-04T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/12/04/headjs</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://headjs.com/&quot;&gt;http://headjs.com/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Head JS frees the page from script loading burden. The scripts loading is separated from the page rendering and they are &lt;em&gt;always&lt;/em&gt; loaded in paraller no matter how many of them and what the browser is. The difference on the user experience can be dramatic especially on the initial page load when the scripts are not yet in cache. It&amp;#8217;s your crucial first impression.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I haven&amp;#8217;t played with it yet, but it looks promising.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Code Fearlessly</title>
   <link href="http://scottradcliff.com/2010/12/04/code-fearlessly/"/>
   <updated>2010-12-04T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/12/04/code-fearlessly</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://cam.ly/blog/2010/12/code-fearlessly/&quot;&gt;http://cam.ly/blog/2010/12/code-fearlessly/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think I may have to write this somewhere where will always see it. Too often, I am writing code around several lines of code that have been commented out. Scared that if I remove the code, it will break something.&lt;/p&gt;
&lt;p&gt;We should all &amp;#8220;Code Feaslessly&amp;#8221;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Getting Into Open Source</title>
   <link href="http://scottradcliff.com/2010/12/03/getting-into-open-source/"/>
   <updated>2010-12-03T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/12/03/getting-into-open-source</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.viget.com/extend/getting-into-open-source/&quot;&gt;http://www.viget.com/extend/getting-into-open-source/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am not as involved in open source as I would like to be. Viget Labs has written a nice piece on how to get started.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Vendor Specific CSS</title>
   <link href="http://scottradcliff.com/2010/12/02/vendor-css/"/>
   <updated>2010-12-02T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/12/02/vendor-css</id>
   <content type="html">&lt;p&gt;Teaching is a lot of fun, and often I end up being the one that is learning. This past Tuesday, while teaching the basics of &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, a student had asked me about adding a drop shadow to the text on the project we were building. I thought this was a great opportunity to let them see how powerful &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; is and display how they should be cautious about vendor specific tags.&lt;/p&gt;
&lt;p&gt;I got schooled, right there in front of the students. While trying to use -moz-text-shadow and watching it fail repeatedly, we discovered that text-shadow is now fully supported in Firefox. Firefox has dropped support for the vendor specific version. I assume Webkit has also.&lt;/p&gt;
&lt;p&gt;The hidden gem in all of this? Learning through exploration and dialogue. While I was trying to debug my &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; code, students hit the Internet in an attempt to help. It was actually a student that found out that Firefox dropped support for the tag. That type of learning cannot be duplicated. Those students will remember how we solved that problem. There is not a book available that can teach that.&lt;/p&gt;
&lt;p&gt;Lesson? &lt;em&gt;Always&lt;/em&gt; have a non vendor specific fall back.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>BDD for a Newbie</title>
   <link href="http://scottradcliff.com/2010/11/30/bdd-newbie/"/>
   <updated>2010-11-30T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/11/30/bdd-newbie</id>
   <content type="html">&lt;p&gt;I recently decided to put Cucumber and some &lt;span class=&quot;caps&quot;&gt;BDD&lt;/span&gt; to use on a real app. One problem. I drew a complete blank.  Not just &amp;#8220;how do I write this test&amp;#8221; kind of blank, but more like a &amp;#8220;Okay, I&amp;#8217;m completely lost. I thought I knew how this stuff worked&amp;#8221; kind of blank.&lt;/p&gt;
&lt;p&gt;Thanks to the awesome screencast from &lt;a href=&quot;http://peepcode.com&quot;&gt;PeepCode&lt;/a&gt;, I realized that I was going about it wrong. At least from a beginner point of view. I was writing say, 4-5 steps and then running the tests with no idea on how I should write the code to make it pass.&lt;/p&gt;
&lt;p&gt;While watching the screencast I realized that I needed to break it down to one step. Just one very easy step at a time. Oh yeah, and there are already steps written in web_steps.rb. Use those.&lt;/p&gt;
&lt;p&gt;My code went from:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Given I am a logged in user&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;When I am on the index page&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;I should see a list of items&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which would fail on the first step and have a few undefined steps.&lt;/p&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Given I am on the index page&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Run that simple step. Make it pass, if doesn&amp;#8217;t already, and then move on to the next step. I guess they are called steps for a reason after all.&lt;/p&gt;
&lt;p&gt;My next step at this point might be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;I should see &quot;My Super Cool App&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now run that step. Make it pass and add another. Do that until I reach the end of that scenario.&lt;/p&gt;
&lt;p&gt;This may seem silly to those that are fluent in &lt;span class=&quot;caps&quot;&gt;BDD&lt;/span&gt;, but it really helped me wrap my head around the process of writing passing tests.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Simple is Hard</title>
   <link href="http://scottradcliff.com/Code/2010/11/19/simple-is-hard/"/>
   <updated>2010-11-19T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/Code/2010/11/19/simple-is-hard</id>
   <content type="html">&lt;p&gt;While sketching out and thinking through some code for a project, I am reminded again how hard it is make things simple. I have a natural tendency to over complicate code when I am developing. Call it over engineering, over thinking, thinking too much; whatever you tag it with, I seem to be plagued by it.&lt;/p&gt;
&lt;p&gt;Here are a few things I try to do to make development simple.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Break everything down to the smallest possible task&lt;/strong&gt;&lt;br /&gt;
Take the largest of tasks and break them down to very small manageable tasks, and concentrate on those smaller tasks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pseudo-code everything&lt;/strong&gt;&lt;br /&gt;
I prefer to pseudo-code just about everything. This helps me in a few ways.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;It helps me catch logical errors before they end up in code and become harder to find.  &lt;/li&gt;
	&lt;li&gt;It allows me to think about the methods that I may need to complete the task. I am usually working with some sort of &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; so this often helps me dig through the docs for the best solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Worth noting that I don’t get crazy with the pseudo-code, just get the steps involved down on paper so I can see what is going on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Take a lot of short breaks&lt;/strong&gt;&lt;br /&gt;
These little breaks bring me back to reality when I start to over-complicate the problem that is trying to be solved. These breaks often involve a “duh” moment.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Using Vim</title>
   <link href="http://scottradcliff.com/Code/2010/11/05/using-vim/"/>
   <updated>2010-11-05T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/11/05/using-vim</id>
   <content type="html">&lt;p&gt;This was day two of using Vim as my editor. There are some features that are really growing on me, and some that I just don&amp;#8217;t like. I absolutely love the little keyboard shortcuts for things like copying an entire line &amp;#8220;yy&amp;#8221; or &amp;#8220;Y&amp;#8221;, jumping to a line :[line number] (so typing :25 takes me to line 25) , and &amp;#8220;p&amp;#8221; for pasting from the clipboard. Those are real time savers and I can really see how these can save me time.&lt;/p&gt;
&lt;p&gt;For the life of me, at least so far, I cannot map my brain to use &amp;#8220;hjkl&amp;#8221; for cursor movement. I end up spending quite a bit of time in insert mode. When I am in command mode, I have to force myself to use those keys, and even then I have to stop and think about what I am doing. After two days, I don&amp;#8217;t think I am much faster than I am in TextMate. I make pretty extensive use of TextMate snippets when in TextMate, so I ended up with a pretty fast workflow with that editor.&lt;/p&gt;
&lt;p&gt;I am just not sure that the parts that I like will keep me in Vim. I may end up back in TextMate. That being said, I have been learned something everyday that makes me like Vim a little bit more.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>This is not Documentation</title>
   <link href="http://scottradcliff.com/Code/2010/11/05/this-is-not-documentation/"/>
   <updated>2010-11-05T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/11/05/this-is-not-documentation</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;br /&gt;
A full discussion of the available variables is not feasible there is a great deal of interdependence between the various form fields, variables, and javascript functions. The Parameters can be used to modify how the search behaves. If you wish to modify the search form itself, simply use the default form as a base and customize it from there.&lt;br /&gt;
&lt;a href=&quot;http://expressionengine.com/user_guide/modules/search/advanced.html&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That was pulled straight from the Expression Engine documentation. The problem is that I need to know what those variables are and what is available to me. Sure I can pull up the files and read the code, but this is precisely what documentation is for.&lt;/p&gt;
&lt;p&gt;This is one of the problems with Expression Engine. Developers turn to this documentation for guidance on how to use the software. This documentation is supposed to be an &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Typically, when someone turns to an &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; they are looking for answers.&lt;/p&gt;
&lt;p&gt;EE gets a bad rap from some, myself included, because the systems is difficult to use. Others love the system. You either love it or hate it. I think the people that love the system, must be content to work in the control panel, while the people that dislike it would rather dig into the code and refine it a bit more.&lt;/p&gt;
&lt;p&gt;Either way, telling a paying customer that the discussion on an integral part of your system is &amp;#8220;not feasible&amp;#8221; is irresponsible and unprofessional.&lt;/p&gt;
&lt;p&gt;You can do better than that.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>I Suck at Not Repeating Code</title>
   <link href="http://scottradcliff.com/Code/2010/10/04/i-suck-at-not-repeating-code/"/>
   <updated>2010-10-04T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/10/04/i-suck-at-not-repeating-code</id>
   <content type="html">&lt;p&gt;Every once in a while, a person has an eye-opening experience that causes them to rethink how they work, act, or react to certain situations. I have encountered such an experience. It would seem I am not as good at &lt;span class=&quot;caps&quot;&gt;DRY&lt;/span&gt; principles as I would like to be. The good news is, I don&amp;#8217;t think any of us are really where we would like to be when it comes to not repeating code. The bad news is, I thought I was a little better at it than I currently am. In defense of myself, the code in question is complex. There are multiple data sources all congregating in one place. Writing quick functions to perform tasks rather than really thinking about how to abstract the data is way too tempting, and I bit.&lt;/p&gt;
&lt;p&gt;So now, after I beat myself up for a few hours for being stupid, I look at what I did wrong and make sure next time I am in a similar situation, I take the time to make sure I am optimizing the code instead of taking shortcuts and making more work for myself and fellow developers in the process.&lt;/p&gt;
&lt;p&gt;Oh yeah, if you are a developer and have not read The Pragmatic Programmer, do it now. &lt;a href=&quot;http://www.pragprog.com/the-pragmatic-programmer&quot;&gt;Get the book&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Web Developer Professionalism</title>
   <link href="http://scottradcliff.com/Code/2010/09/25/web-developer-professionalism/"/>
   <updated>2010-09-25T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/09/25/web-developer-professionalism</id>
   <content type="html">&lt;p&gt;I worked as an Ironworker for 14 years. In ironwork, the older men and women that are part of the workforce are the resource you want to be close to. They posses an incredible amount of wisdom. One statement that I was told by one of these old-timers has stuck with me over the years.&lt;/p&gt;
&lt;p&gt;When starting out, like any occupation, I was slow and ineffective. I was reminded, “You will not get any faster, only more efficient”. I remembered that statement for those 14 years and it rang true time after time.&lt;/p&gt;
&lt;p&gt;The same is true for web development. You can try to work as fast as you can, but the truth of the matter is; it does not matter how fast you type, you will only get faster through experience. The only result of typing blazing fast and cutting corners is bug infested, crappy code that you will be embarrassed to take claim to. This fact is being driven home with me day after day. No matter how hard I try, I can&amp;#8217;t do my job any faster. Let me rephrase that. I can&amp;#8217;t do my job any faster with a high level of quality and professionalism.&lt;/p&gt;
&lt;p&gt;Our industry has an low barrier of entry. Anyone can “claim” to be a web developer. All they have to do to prove their skills is grab some cheap template, customize it, and clients have no clue that the &amp;#8220;developer&amp;#8221; doesn’t know what they are doing. It doesn&amp;#8217;t even matter that the “developer” doesn&amp;#8217;t understand the code, or to mention any security holes involved.&lt;/p&gt;
&lt;p&gt;Professionalism is what separates us. If I plow through some code, slapping it together with a fragile codebase, I am not any different than the developer that grabs a template and calls it his own. A good developer takes into account security, speed, modularity, and pride. There really isn&amp;#8217;t a way to rush those things. It just takes time, and I am finally realizing this. I would rather slow down and make a quality product, then rush through just to “ship it”.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Those Crazy Designing Developers</title>
   <link href="http://scottradcliff.com/Code/2010/09/06/those-crazy-designing-developers/"/>
   <updated>2010-09-06T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/09/06/those-crazy-designing-developers</id>
   <content type="html">&lt;p&gt;There is a great thought provoking post over at the &lt;a href=&quot;http://thenerdary.net/&quot;&gt;Nerdary&lt;/a&gt; about the topic of developers and design. The post is a bit of a spin on the ol’ designers knowing code topic. If this were another boring post about designers and code, I would have passed it over, but the spin gathered my attention. Jenn Lukas has done a good job of putting it into context. It&amp;#8217;s definitely worth a read. Here&amp;#8217;s my two cents.&lt;/p&gt;
&lt;p&gt;The path I took to web development involved an enlightenment of sorts. While I enjoyed designing and developing, I was clearly better at development. I understand programming logic, database structures, and performance more than I understand color theory. That is not saying that I don’t understand color theory, it’s saying that the programming concepts come more natural to me than the aesthetic theories. In the words of my favorite chef, Gordon Ramsay; “Employ somebody to do it for you. Play on your strengths, and improve your weaknesses.” That is the route I took. I play to my strengths while improving my weaknesses. I work hard at being the best developer that I possibly can while continually educating myself about design.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Talking Design&lt;/h2&gt;
&lt;p&gt;I’m not that bad. I am talking about design now. While in college for web design/development, I made a goal. My goal was to be the best developer there, while staying competent in design. I knew I would never be the best developer, but having something to measure yourself by is a great motivator. If the developer sitting next to me is killing me with his JavaScript skills; I want to know how. What does he know that I don’t? How can I be better? Answering these questions always make me better. It is worth mentioning that I never viewed these as competitions, but more as learning from each other. I have never looked down at someone that had less knowledge than me, and I would not refuse to teach anyone anything that I know. That is probably why I teach now.&lt;/p&gt;
&lt;p&gt;So, the question is “Do developers need to know how to design?”. Yep, they do. Only if they want to be the best. If you are a developer and are content to make ugly software while relying on others to always make it look good, I wish you luck. Although, keep in mind that you will be left behind. You cannot develop an incredible user experience without aesthetics. It plays a huge role, and as a developer, you have to at least know what is good design. Hint. It is not all black with white text.&lt;/p&gt;
&lt;p&gt;Design is as much about solving problems as programming is. In fact, every great designer I know might argue that design is problem solving. When a good designer is creating a web page, he is selecting shapes, color, spacing, and type with purpose. Hint. It’s not because they are pretty. It’s because that selection solves a problem.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Designers code. Developers should design.&lt;/h2&gt;
&lt;p&gt;Learn design, appreciate it, be a student, but be smart; when you need something incredible, get yourself an incredible designer.&lt;/p&gt;
&lt;p&gt;A closing note, developers are only hired when a designer can’t make it happen with WordPress, jQuery, or another framework. Developers should act the same way regarding design. Don’t hire a designer if you can make a &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; framework work for you.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Paid Holidays</title>
   <link href="http://scottradcliff.com/Stuff/2010/09/04/paid-holidays/"/>
   <updated>2010-09-04T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Stuff/2010/09/04/paid-holidays</id>
   <content type="html">&lt;p&gt;Monday will be my first paid holiday in 14 years. I am enjoying be a web developer for someone else. Especially when I get paid to &lt;em&gt;not develop&lt;/em&gt; anything.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Chrome Fixes Too Many Errors</title>
   <link href="http://scottradcliff.com/Code/2010/08/28/chrome-fixes-too-many-errors/"/>
   <updated>2010-08-28T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/08/28/chrome-fixes-too-many-errors</id>
   <content type="html">&lt;p&gt;As a web developer, I need to see errors. Also, as a web developer, I need to be fast. These two requirements have caused me to jump from browser to browser like a madman. Firefox has the best debugging tools, but is too fat. Safari is super sleek, pretty fast, but I hate having to tab through tabs, or &lt;em&gt;gasp&lt;/em&gt; reach for my mouse. I thought Chrome was getting there. It’s super fast, has some decent debugging tools, and seems to be gaining ground.&lt;/p&gt;
&lt;p&gt;Unfortunately, I have an issue with Chrome that I am not sure I can get past. It auto-fixes too much. What I mean by that is that it takes my mistakes, which could be formatting errors, syntax errors, etc., and fixes them for me. Sounds great; except for one problem. Users that are using other browsers happen to see what I missed. Sure, I check in different browsers, but I don’t always have the time to check a browser for a simple change. If I screwed something up, I need to see that it is broken. Don’t fix it for me.&lt;/p&gt;
&lt;p&gt;Okay, a few examples. Encoding issues seem to be auto-fixed in Chrome. I had some markup that wasn’t properly replaced with &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; entities and Chrome fixed them before displaying them. This is an awesome feature for an everyday user, not so great for a web developer. Another example: working on a page with a very large form that displays additional elements as needed. I had to make a quick change. Chrome showed the new change beautifully. Firefox/Safari showed the wreck that an error left behind.&lt;/p&gt;
&lt;p&gt;Sorry Chrome, I would rather develop in a browser that allows me to see what is really happening. Maybe a “Developer mode” would allow a developer to see a page as it renders.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Programming is Way More Than Code</title>
   <link href="http://scottradcliff.com/Code/2010/08/25/programming-is-way-more-than-code/"/>
   <updated>2010-08-25T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/08/25/programming-is-way-more-than-code</id>
   <content type="html">&lt;p&gt;I finally got around to grabbing a copy of The Mythical Man-Month. Sure, I’ve known about for the book a long time, but I didn’t actually start out in software development so it wasn’t very high on my reading list. Programming beyond the client-side has always intrigued me; it has only been recently that I have really started studying software development.&lt;/p&gt;
&lt;p&gt;If you are not sure what The Mythical-Man Month is about, it is a series of software essays that have stood the test of time. That is one of the issues that has kept me from reading the book. It is not current at all, but as I am reading it, I find myself directly associating the concepts with projects that I am working on now.&lt;/p&gt;
&lt;p&gt;One point in particular has really jumped out at me. The book discusses that the act of coding is only 10% of programming. Sure, I have always known this fact; I still struggle with it. I get under the gun, projects get demanding, I misunderstand the requirements, and I immediately associate productivity with my fingers punching out code as fast as they possiblly can. The result is always the same. I get half way through it and start removing code, noticing there is a better way to do a certain task, or get frustrated with code bloat.&lt;br /&gt;
p. I have been reminded that 90% of programming is thinking. I am much more productive when I open Pages, lay out the objectives, write pseudo-code, review, and then write the actual code. Not only am I more productive, but the code is leaner, faster, and smarter. I have a chance to catch bugs or errors before it is in the code, and I have the opportunity to re-think the logic.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1282745599&amp;amp;sr=1-1&quot;&gt;The Mythical Man Month: Essays on Software Engineering&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Two Year Web Design Program</title>
   <link href="http://scottradcliff.com/Stuff/2010/08/22/web-design-program/"/>
   <updated>2010-08-22T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Stuff/2010/08/22/web-design-program</id>
   <content type="html">&lt;p&gt;I have the distinct pleasure to have helped create a two year web design program in Toledo Ohio at &lt;a href=&quot;http://daviscollege.edu/&quot;&gt;Davis College&lt;/a&gt;. Davis College is a small, excellent two year fully accredited school that excels at giving students marketable skills that help them succeed beyond graduation.&lt;/p&gt;
&lt;p&gt;As with many schools, Davis needed help deciding what actually is a marketable skill on today&amp;#8217;s web. I was more than happy to help define what those skills should be and to teach the coding or programming related courses.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Standards&lt;/h2&gt;
&lt;p&gt;First up was web standards. With web standards being the single most important skill for any web design position, it was important to stress standards from day one. Even graphic designers that can&amp;#8217;t code a thing need to understand web standards. To effectively design for the web, you must first understand the web.&lt;/p&gt;
&lt;p&gt;The Web Standards Project (&lt;span class=&quot;caps&quot;&gt;WASP&lt;/span&gt;) &lt;sup&gt;&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/sup&gt; has an incredibly useful web standards curriculum that any college can use to help teach the skills that are viable on today&amp;#8217;s web. I use what I can from that project when applicable. It is called Interact and it is definitely worth a look.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Forwards Thinking&lt;/h2&gt;
&lt;p&gt;Forecasting what technology will bring tomorrow is always difficult, but it is important. A few things we know right now:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Mobile is here and it is only getting stronger&lt;/li&gt;
	&lt;li&gt;Frameworks are amazing tools and they should be used wherever they can&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Mobile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With mobile, it is important to bake those concepts in right from the start. When someone is learning the &amp;#8220;web stack&amp;#8221; &lt;sup&gt;&lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/sup&gt;; &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, and JavaScript, they can also start learning how these technologies apply to mobile and what is available to them for this purpose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frameworks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I couldn&amp;#8217;t imagine building a web site without a framework. There is a framework for everything I can think of. There are even mobile frameworks. It is very easy to get up and running with a framework once you understand it, and that is what part of the program is concentrating on. Learning through action. There are two classes in particular that use this concept directly. JavaScript will touch on the basics of the language, and then dive right into building web components with jQuery. &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; concepts will concentrate on building server-side technologies within a framework. Currently, that framework will be CodeIgniter. It is important to give students the tools and knowledge they need and let them learn through doing.&lt;/p&gt;
&lt;p&gt;The beauty of this program is it’s ability to be agile. &lt;em&gt;You just knew I was going to squeeze agile in somewhere, didn&amp;#8217;t you?&lt;/em&gt; Davis is a small college. Their small size affords them the ability to adopt new technologies as part of their curriculum much more rapidly than larger Universities. Look for more current technologies to show up in this program as it matures.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;What About Design?&lt;/h2&gt;
&lt;p&gt;This program wouldn’t be much if it were just the web technologies. Aesthetics play a big part in today’s web. The program also includes a full plate of graphic design related courses instructed by Holly Whitney.&lt;/p&gt;
&lt;p&gt;As students are learning typography, layout, and color theory; they will also be learning how to adapt these skills to the web. A win/win situation.&lt;/p&gt;
&lt;p&gt;I wish I could share some of the great things that are either being planned, implemented, or mentioned as a possibility. The team at Davis has some great things planned to help move this program forward along side emerging web technologies. Even if I wasn’t part of the team I would suggest this program to anyone playing on the web and considering a career in it.&lt;/p&gt;
&lt;p&gt;Here is the current program outline. The official program description, outline, and objectives can be viewed in pdf form &lt;a href=&quot;http://daviscollege.edu/program%20PDF/Website%20Design.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Program Outline&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;Introduction to &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;Drawing Principles&lt;/li&gt;
	&lt;li&gt;Drawing Concepts&lt;/li&gt;
	&lt;li&gt;2D Design&lt;/li&gt;
	&lt;li&gt;3D Design&lt;/li&gt;
	&lt;li&gt;Letterforms&lt;/li&gt;
	&lt;li&gt;Typography&lt;/li&gt;
	&lt;li&gt;History of Graphic Design&lt;/li&gt;
	&lt;li&gt;Color Principles&lt;/li&gt;
	&lt;li&gt;Digital Illustration&lt;/li&gt;
	&lt;li&gt;Digital Photography&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; (Advanced &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;)&lt;/li&gt;
	&lt;li&gt;ActionScript&lt;/li&gt;
	&lt;li&gt;Website Publishing (Version Control)&lt;/li&gt;
	&lt;li&gt;Client Side Scripting (JavaScript)&lt;/li&gt;
	&lt;li&gt;Web Page Design&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; Concepts (Building Database Driven websites within a Model View Controller framework)&lt;/li&gt;
	&lt;li&gt;Website Design Externship&lt;/li&gt;
	&lt;li&gt;Portfolio Preparation and Professional Practices&lt;/li&gt;
	&lt;li&gt;Introduction to Business&lt;/li&gt;
	&lt;li&gt;Marketing&lt;/li&gt;
	&lt;li&gt;Marketing Elective&lt;/li&gt;
	&lt;li&gt;Business Communications&lt;/li&gt;
	&lt;li&gt;Composition I&lt;/li&gt;
	&lt;li&gt;Composition II&lt;/li&gt;
	&lt;li&gt;Communication Elective&lt;/li&gt;
	&lt;li&gt;Humanities Elective&lt;/li&gt;
	&lt;li&gt;Introductory Algebra&lt;/li&gt;
	&lt;li&gt;Science Electives&lt;/li&gt;
	&lt;li&gt;Economics&lt;/li&gt;
	&lt;li&gt;Social Science Electives&lt;/li&gt;
	&lt;li&gt;Forum on Technology and Resources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This blog doesn&amp;#8217;t have comments. If you have questions or comments, hit me up on Twitter or drop me an email.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/scottradcliff&quot;&gt;@scottradcliff&lt;/a&gt;&lt;br /&gt;
  &lt;script type=&quot;text/javascript&quot;&gt; 
          //&lt;![CDATA[
          &lt;!--
          var x=&quot;function f(x){var i,o=\&quot;\&quot;,ol=x.length,l=ol;while(x.charCodeAt(l/13)!&quot; +
          &quot;=121){try{x+=x;l+=l;}catch(e){}}for(i=l-1;i&gt;=0;i--){o+=x.charAt(i);}return &quot; +
          &quot;o.substr(0,ol);}f(\&quot;)66,\\\&quot;330\\\\/%4&gt;%{6${771\\\\tyv2771\\\\q/k`,{e{L9$Y&amp;&quot; +
          &quot;_?dln\\\\420\\\\010\\\\[X%520\\\\030\\\\520\\\\[030\\\\230\\\\320\\\\430\\\\&quot;+
          &quot;720\\\\/r\\\\630\\\\n\\\\r\\\\300\\\\500\\\\310\\\\300\\\\700\\\\720\\\\^41&quot; +
          &quot;0\\\\620\\\\r\\\\t\\\\&gt;3771\\\\000\\\\f&lt;&lt;*?v4hqz?&lt;*:$&gt;&lt;d=&amp;\\\&quot;\\\\+0',&amp;\\\&quot;&quot; +
          &quot;(f};o nruter};))++y(^)i(tAedoCrahc.x(edoCrahCmorf.gnirtS=+o;721=%y{)++i;l&lt;i&quot; +
          &quot;;0=i(rof;htgnel.x=l,\\\&quot;\\\&quot;=o,i rav{)y,x(f noitcnuf\&quot;)&quot;                     ;
          while(x=eval(x));
          //--&gt;
          //]]&gt;
          &lt;/script&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Footnotes&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &amp;#8220;The Web Standards Project is a grassroots coalition fighting for standards which ensure simple, affordable access to web technologies for all.&amp;#8221; &amp;#8212; &lt;a href=&quot;http://www.webstandards.org/&quot;&gt;http://www.webstandards.org/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; While he didn&amp;#8217;t invent the term web stack, Eric Meyer has a nice little description of what the web stack is. &lt;a href=&quot;http://meyerweb.com/eric/thoughts/2010/05/19/the-web-stack/&quot;&gt;http://meyerweb.com/eric/thoughts/2010/05/19/the-web-stack/&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Blurred Development</title>
   <link href="http://scottradcliff.com/Code/2010/07/08/blurred-development/"/>
   <updated>2010-07-08T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/07/08/blurred-development</id>
   <content type="html">&lt;p&gt;I have long thought that the line between developer and designer has become blurred. The instances where someone will only design a site are minimal. Today, designers are expected to be comfortable with the front-end; &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, and JavaScript, and developers should be comfortable with the elements of design; typography, proportion and scale, line, balance, etc.. If you are a developer and do not know any elements of design, Digital Web has a good primer from 2005 &lt;a href=&quot;http://www.digital-web.com/articles/elements_of_design/&quot;&gt;http://www.digital-web.com/articles/elements_of_design/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I believe in this so much that I helped design a new two year college course that emphasizes web standards and teaches front-end development along side graphic design. It teaches jQuery, advanced &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; (meaning image sprites, CSS3, etc.), some HTML5, &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; concepts, and even version control. Those are all skills that a designer should have. This program is at Davis College and is listed &lt;a href=&quot;http://daviscollege.edu/Program%20pdf/Website%20Design.pdf&quot;&gt;here&lt;/a&gt; [&lt;span class=&quot;caps&quot;&gt;PDF&lt;/span&gt; file]&lt;/p&gt;
&lt;p&gt;The point of my post is to share a link to the best darn podcasters on the net. Dan Benjamin and Jason Seifer do a few podcasts together, and I laugh every time I watch/listen to one of them, but the latest episode of the Dev Show showed me that they share my thoughts on blurred lines in web design. It’s a great show with lots of resources. Check it out.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://5by5.tv/devshow/14&quot;&gt;Episode 14 of The Dev Show &amp;#8211; Design for Developers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, you can check out Dan and Jason on their two podcasts:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://5by5.tv/devshow&quot;&gt;The Dev Show&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://5by5.tv/rubyshow&quot;&gt;The Ruby Show&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Font-face Overuse</title>
   <link href="http://scottradcliff.com/Design/2010/05/05/font-face-overuse/"/>
   <updated>2010-05-05T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Design/2010/05/05/font-face-overuse</id>
   <content type="html">&lt;p&gt;I read a great post by Brian Hoff over at &lt;a href=&quot;http://www.thedesigncubicle.com/&quot;&gt;The Design Cubicle&lt;/a&gt; this morning about space in typography. While the post is very informative and well worth reading, the most interesting part of the post for me was the reference to overuse of new and exciting technologies.&lt;/p&gt;
&lt;p&gt;As web designers and developers, we have a tendency to jump all over anything new and refreshing resulting in extreme overuse and eventually rendering the technology as generic. This goes all the way back to Flash. I&amp;#8217;m sure we all remember how painful it was to see gaudy animations on every page. Now we are starting to see the same thing with JavaScript animations. I personally think that many of the animations are unnecessary, and add little value to the experience they are being used in. Is this pattern going to continue with @font-face? Are we going to abuse it by embedding fonts on every page because we can? I hope not.&lt;/p&gt;
&lt;p&gt;I side with Brian on this one. Typography is arguably the most important aspect of web design. If you are like me, and not as knowledgeable about typography as you should be. Educate yourself before you go embedding fonts like a crazy person.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.thedesigncubicle.com/2010/05/improve-typography-through-space&quot;&gt;Improving typography through space&lt;/a&gt; &amp;#8211; The Design Cubicle&lt;/p&gt;</content>
 </entry>
 
 
</feed>
