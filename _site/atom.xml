<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Scott Radcliff</title>
 <link href="http://scottradcliff.com/atom.xml" rel="self"/>
 <link href="http://scottradcliff.com/"/>
 <updated>2010-11-30T07:29:23-05:00</updated>
 <id>http://scottradcliff.com/</id>
 <author>
   <name>Scott Radcliff</name>
   <email>scott@scottradcliff.com</email>
 </author>

 
 <entry>
   <title>BDD for a Newbie</title>
   <link href="http://scottradcliff.com/2010/11/30/bdd-newbie.html"/>
   <updated>2010-11-30T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/2010/11/30/bdd-newbie</id>
   <content type="html">&lt;p&gt;I recently decided to put Cucumber and some &lt;span class=&quot;caps&quot;&gt;BDD&lt;/span&gt; to use on a real app. One problem. I drew a complete blank.  Not just &amp;#8220;how do I write this test&amp;#8221; kind of blank, but more like a &amp;#8220;Okay, I&amp;#8217;m completely lost. I thought I knew how this stuff worked&amp;#8221; kind of blank.&lt;/p&gt;
&lt;p&gt;Thanks to the awesome screencast from &lt;a href=&quot;http://peepcode.com&quot;&gt;PeepCode&lt;/a&gt;, I realized that I was going about it wrong. At least from a beginner point of view. I was writing say, 4-5 steps and then running the tests with no idea on how I should write the code to make it pass.&lt;/p&gt;
&lt;p&gt;While watching the screencast I realized that I needed to break it down to one step. Just one very easy step at a time. Oh yeah, and there are already steps written in web_steps.rb. Use those.&lt;/p&gt;
&lt;p&gt;My code went from:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Given I am a logged in user&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;When I am on the index page&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;I should see a list of items&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which would fail on the first step and have a few undefined steps.&lt;/p&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Given I am on the index page&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Run that simple step. Make it pass, if doesn&amp;#8217;t already, and then move on to the next step. I guess they are called steps for a reason after all.&lt;/p&gt;
&lt;p&gt;My next step at this point might be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;I should see &quot;My Super Cool App&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now run that step. Make it pass and add another. Do that until I reach the end of that scenario.&lt;/p&gt;
&lt;p&gt;This may seem silly to those that are fluent in &lt;span class=&quot;caps&quot;&gt;BDD&lt;/span&gt;, but it really helped me wrap my head around the process of writing passing tests.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Simple is Hard</title>
   <link href="http://scottradcliff.com/Code/2010/11/19/simple-is-hard.html"/>
   <updated>2010-11-19T00:00:00-05:00</updated>
   <id>http://scottradcliff.com/Code/2010/11/19/simple-is-hard</id>
   <content type="html">&lt;p&gt;While sketching out and thinking through some code for a project, I am reminded again how hard it is make things simple. I have a natural tendency to over complicate code when I am developing. Call it over engineering, over thinking, thinking too much; whatever you tag it with, I seem to be plagued by it.&lt;/p&gt;
&lt;p&gt;Here are a few things I try to do to make development simple.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Break everything down to the smallest possible task&lt;/strong&gt;&lt;br /&gt;
Take the largest of tasks and break them down to very small manageable tasks, and concentrate on those smaller tasks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pseudo-code everything&lt;/strong&gt;&lt;br /&gt;
I prefer to pseudo-code just about everything. This helps me in a few ways.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;It helps me catch logical errors before they end up in code and become harder to find.  &lt;/li&gt;
	&lt;li&gt;It allows me to think about the methods that I may need to complete the task. I am usually working with some sort of &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; so this often helps me dig through the docs for the best solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Worth noting that I don’t get crazy with the pseudo-code, just get the steps involved down on paper so I can see what is going on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Take a lot of short breaks&lt;/strong&gt;&lt;br /&gt;
These little breaks bring me back to reality when I start to over-complicate the problem that is trying to be solved. These breaks often involve a “duh” moment.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Using Vim</title>
   <link href="http://scottradcliff.com/Code/2010/11/05/using-vim.html"/>
   <updated>2010-11-05T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/11/05/using-vim</id>
   <content type="html">&lt;p&gt;This was day two of using Vim as my editor. There are some features that are really growing on me, and some that I just don&amp;#8217;t like. I absolutely love the little keyboard shortcuts for things like copying an entire line &amp;#8220;yy&amp;#8221; or &amp;#8220;Y&amp;#8221;, jumping to a line :[line number] (so typing :25 takes me to line 25) , and &amp;#8220;p&amp;#8221; for pasting from the clipboard. Those are real time savers and I can really see how these can save me time.&lt;/p&gt;
&lt;p&gt;For the life of me, at least so far, I cannot map my brain to use &amp;#8220;hjkl&amp;#8221; for cursor movement. I end up spending quite a bit of time in insert mode. When I am in command mode, I have to force myself to use those keys, and even then I have to stop and think about what I am doing. After two days, I don&amp;#8217;t think I am much faster than I am in TextMate. I make pretty extensive use of TextMate snippets when in TextMate, so I ended up with a pretty fast workflow with that editor.&lt;/p&gt;
&lt;p&gt;I am just not sure that the parts that I like will keep me in Vim. I may end up back in TextMate. That being said, I have been learned something everyday that makes me like Vim a little bit more.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>This is not Documentation</title>
   <link href="http://scottradcliff.com/Code/2010/11/05/this-is-not-documentation.html"/>
   <updated>2010-11-05T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/11/05/this-is-not-documentation</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;br /&gt;
A full discussion of the available variables is not feasible there is a great deal of interdependence between the various form fields, variables, and javascript functions. The Parameters can be used to modify how the search behaves. If you wish to modify the search form itself, simply use the default form as a base and customize it from there.&lt;br /&gt;
&lt;a href=&quot;http://expressionengine.com/user_guide/modules/search/advanced.html&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That was pulled straight from the Expression Engine documentation. The problem is that I need to know what those variables are and what is available to me. Sure I can pull up the files and read the code, but this is precisely what documentation is for.&lt;/p&gt;
&lt;p&gt;This is one of the problems with Expression Engine. Developers turn to this documentation for guidance on how to use the software. This documentation is supposed to be an &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Typically, when someone turns to an &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; they are looking for answers.&lt;/p&gt;
&lt;p&gt;EE gets a bad rap from some, myself included, because the systems is difficult to use. Others love the system. You either love it or hate it. I think the people that love the system, must be content to work in the control panel, while the people that dislike it would rather dig into the code and refine it a bit more.&lt;/p&gt;
&lt;p&gt;Either way, telling a paying customer that the discussion on an integral part of your system is &amp;#8220;not feasible&amp;#8221; is irresponsible and unprofessional.&lt;/p&gt;
&lt;p&gt;You can do better than that.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>I Suck at Not Repeating Code</title>
   <link href="http://scottradcliff.com/Code/2010/10/04/i-suck-at-not-repeating-code.html"/>
   <updated>2010-10-04T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/10/04/i-suck-at-not-repeating-code</id>
   <content type="html">&lt;p&gt;Every once in a while, a person has an eye-opening experience that causes them to rethink how they work, act, or react to certain situations. I have encountered such an experience. It would seem I am not as good at &lt;span class=&quot;caps&quot;&gt;DRY&lt;/span&gt; principles as I would like to be. The good news is, I don&amp;#8217;t think any of us are really where we would like to be when it comes to not repeating code. The bad news is, I thought I was a little better at it than I currently am. In defense of myself, the code in question is complex. There are multiple data sources all congregating in one place. Writing quick functions to perform tasks rather than really thinking about how to abstract the data is way too tempting, and I bit.&lt;/p&gt;
&lt;p&gt;So now, after I beat myself up for a few hours for being stupid, I look at what I did wrong and make sure next time I am in a similar situation, I take the time to make sure I am optimizing the code instead of taking shortcuts and making more work for myself and fellow developers in the process.&lt;/p&gt;
&lt;p&gt;Oh yeah, if you are a developer and have not read The Pragmatic Programmer, do it now. &lt;a href=&quot;http://www.pragprog.com/the-pragmatic-programmer&quot;&gt;Get the book&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Web Developer Professionalism</title>
   <link href="http://scottradcliff.com/Code/2010/09/25/web-developer-professionalism.html"/>
   <updated>2010-09-25T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/09/25/web-developer-professionalism</id>
   <content type="html">&lt;p&gt;I worked as an Ironworker for 14 years. In ironwork, the older men and women that are part of the workforce are the resource you want to be close to. They posses an incredible amount of wisdom. One statement that I was told by one of these old-timers has stuck with me over the years.&lt;/p&gt;
&lt;p&gt;When starting out, like any occupation, I was slow and ineffective. I was reminded, “You will not get any faster, only more efficient”. I remembered that statement for those 14 years and it rang true time after time.&lt;/p&gt;
&lt;p&gt;The same is true for web development. You can try to work as fast as you can, but the truth of the matter is; it does not matter how fast you type, you will only get faster through experience. The only result of typing blazing fast and cutting corners is bug infested, crappy code that you will be embarrassed to take claim to. This fact is being driven home with me day after day. No matter how hard I try, I can&amp;#8217;t do my job any faster. Let me rephrase that. I can&amp;#8217;t do my job any faster with a high level of quality and professionalism.&lt;/p&gt;
&lt;p&gt;Our industry has an low barrier of entry. Anyone can “claim” to be a web developer. All they have to do to prove their skills is grab some cheap template, customize it, and clients have no clue that the &amp;#8220;developer&amp;#8221; doesn’t know what they are doing. It doesn&amp;#8217;t even matter that the “developer” doesn&amp;#8217;t understand the code, or to mention any security holes involved.&lt;/p&gt;
&lt;p&gt;Professionalism is what separates us. If I plow through some code, slapping it together with a fragile codebase, I am not any different than the developer that grabs a template and calls it his own. A good developer takes into account security, speed, modularity, and pride. There really isn&amp;#8217;t a way to rush those things. It just takes time, and I am finally realizing this. I would rather slow down and make a quality product, then rush through just to “ship it”.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Those Crazy Designing Developers</title>
   <link href="http://scottradcliff.com/Code/2010/09/06/those-crazy-designing-developers.html"/>
   <updated>2010-09-06T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/09/06/those-crazy-designing-developers</id>
   <content type="html">&lt;p&gt;There is a great thought provoking post over at the &lt;a href=&quot;http://thenerdary.net/&quot;&gt;Nerdary&lt;/a&gt; about the topic of developers and design. The post is a bit of a spin on the ol’ designers knowing code topic. If this were another boring post about designers and code, I would have passed it over, but the spin gathered my attention. Jenn Lukas has done a good job of putting it into context. It&amp;#8217;s definitely worth a read. Here&amp;#8217;s my two cents.&lt;/p&gt;
&lt;p&gt;The path I took to web development involved an enlightenment of sorts. While I enjoyed designing and developing, I was clearly better at development. I understand programming logic, database structures, and performance more than I understand color theory. That is not saying that I don’t understand color theory, it’s saying that the programming concepts come more natural to me than the aesthetic theories. In the words of my favorite chef, Gordon Ramsay; “Employ somebody to do it for you. Play on your strengths, and improve your weaknesses.” That is the route I took. I play to my strengths while improving my weaknesses. I work hard at being the best developer that I possibly can while continually educating myself about design.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Talking Design&lt;/h2&gt;
&lt;p&gt;I’m not that bad. I am talking about design now. While in college for web design/development, I made a goal. My goal was to be the best developer there, while staying competent in design. I knew I would never be the best developer, but having something to measure yourself by is a great motivator. If the developer sitting next to me is killing me with his JavaScript skills; I want to know how. What does he know that I don’t? How can I be better? Answering these questions always make me better. It is worth mentioning that I never viewed these as competitions, but more as learning from each other. I have never looked down at someone that had less knowledge than me, and I would not refuse to teach anyone anything that I know. That is probably why I teach now.&lt;/p&gt;
&lt;p&gt;So, the question is “Do developers need to know how to design?”. Yep, they do. Only if they want to be the best. If you are a developer and are content to make ugly software while relying on others to always make it look good, I wish you luck. Although, keep in mind that you will be left behind. You cannot develop an incredible user experience without aesthetics. It plays a huge role, and as a developer, you have to at least know what is good design. Hint. It is not all black with white text.&lt;/p&gt;
&lt;p&gt;Design is as much about solving problems as programming is. In fact, every great designer I know might argue that design is problem solving. When a good designer is creating a web page, he is selecting shapes, color, spacing, and type with purpose. Hint. It’s not because they are pretty. It’s because that selection solves a problem.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Designers code. Developers should design.&lt;/h2&gt;
&lt;p&gt;Learn design, appreciate it, be a student, but be smart; when you need something incredible, get yourself an incredible designer.&lt;/p&gt;
&lt;p&gt;A closing note, developers are only hired when a designer can’t make it happen with WordPress, jQuery, or another framework. Developers should act the same way regarding design. Don’t hire a designer if you can make a &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; framework work for you.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Paid Holidays</title>
   <link href="http://scottradcliff.com/Stuff/2010/09/04/paid-holidays.html"/>
   <updated>2010-09-04T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Stuff/2010/09/04/paid-holidays</id>
   <content type="html">&lt;p&gt;Monday will be my first paid holiday in 14 years. I am enjoying be a web developer for someone else. Especially when I get paid to &lt;em&gt;not develop&lt;/em&gt; anything.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Chrome Fixes Too Many Errors</title>
   <link href="http://scottradcliff.com/Code/2010/08/28/chrome-fixes-too-many-errors.html"/>
   <updated>2010-08-28T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/08/28/chrome-fixes-too-many-errors</id>
   <content type="html">&lt;p&gt;As a web developer, I need to see errors. Also, as a web developer, I need to be fast. These two requirements have caused me to jump from browser to browser like a madman. Firefox has the best debugging tools, but is too fat. Safari is super sleek, pretty fast, but I hate having to tab through tabs, or &lt;em&gt;gasp&lt;/em&gt; reach for my mouse. I thought Chrome was getting there. It’s super fast, has some decent debugging tools, and seems to be gaining ground.&lt;/p&gt;
&lt;p&gt;Unfortunately, I have an issue with Chrome that I am not sure I can get past. It auto-fixes too much. What I mean by that is that it takes my mistakes, which could be formatting errors, syntax errors, etc., and fixes them for me. Sounds great; except for one problem. Users that are using other browsers happen to see what I missed. Sure, I check in different browsers, but I don’t always have the time to check a browser for a simple change. If I screwed something up, I need to see that it is broken. Don’t fix it for me.&lt;/p&gt;
&lt;p&gt;Okay, a few examples. Encoding issues seem to be auto-fixed in Chrome. I had some markup that wasn’t properly replaced with &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; entities and Chrome fixed them before displaying them. This is an awesome feature for an everyday user, not so great for a web developer. Another example: working on a page with a very large form that displays additional elements as needed. I had to make a quick change. Chrome showed the new change beautifully. Firefox/Safari showed the wreck that an error left behind.&lt;/p&gt;
&lt;p&gt;Sorry Chrome, I would rather develop in a browser that allows me to see what is really happening. Maybe a “Developer mode” would allow a developer to see a page as it renders.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Programming is Way More Than Code</title>
   <link href="http://scottradcliff.com/Code/2010/08/25/programming-is-way-more-than-code.html"/>
   <updated>2010-08-25T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/08/25/programming-is-way-more-than-code</id>
   <content type="html">&lt;p&gt;I finally got around to grabbing a copy of The Mythical Man-Month. Sure, I’ve known about for the book a long time, but I didn’t actually start out in software development so it wasn’t very high on my reading list. Programming beyond the client-side has always intrigued me; it has only been recently that I have really started studying software development.&lt;/p&gt;
&lt;p&gt;If you are not sure what The Mythical-Man Month is about, it is a series of software essays that have stood the test of time. That is one of the issues that has kept me from reading the book. It is not current at all, but as I am reading it, I find myself directly associating the concepts with projects that I am working on now.&lt;/p&gt;
&lt;p&gt;One point in particular has really jumped out at me. The book discusses that the act of coding is only 10% of programming. Sure, I have always known this fact; I still struggle with it. I get under the gun, projects get demanding, I misunderstand the requirements, and I immediately associate productivity with my fingers punching out code as fast as they possiblly can. The result is always the same. I get half way through it and start removing code, noticing there is a better way to do a certain task, or get frustrated with code bloat.&lt;br /&gt;
p. I have been reminded that 90% of programming is thinking. I am much more productive when I open Pages, lay out the objectives, write pseudo-code, review, and then write the actual code. Not only am I more productive, but the code is leaner, faster, and smarter. I have a chance to catch bugs or errors before it is in the code, and I have the opportunity to re-think the logic.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1282745599&amp;amp;sr=1-1&quot;&gt;The Mythical Man Month: Essays on Software Engineering&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Two Year Web Design Program</title>
   <link href="http://scottradcliff.com/Stuff/2010/08/22/web-design-program.html"/>
   <updated>2010-08-22T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Stuff/2010/08/22/web-design-program</id>
   <content type="html">&lt;p&gt;I have the distinct pleasure to have helped create a two year web design program in Toledo Ohio at &lt;a href=&quot;http://daviscollege.edu/&quot;&gt;Davis College&lt;/a&gt;. Davis College is a small, excellent two year fully accredited school that excels at giving students marketable skills that help them succeed beyond graduation.&lt;/p&gt;
&lt;p&gt;As with many schools, Davis needed help deciding what actually is a marketable skill on today&amp;#8217;s web. I was more than happy to help define what those skills should be and to teach the coding or programming related courses.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Standards&lt;/h2&gt;
&lt;p&gt;First up was web standards. With web standards being the single most important skill for any web design position, it was important to stress standards from day one. Even graphic designers that can&amp;#8217;t code a thing need to understand web standards. To effectively design for the web, you must first understand the web.&lt;/p&gt;
&lt;p&gt;The Web Standards Project (&lt;span class=&quot;caps&quot;&gt;WASP&lt;/span&gt;) &lt;sup&gt;&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/sup&gt; has an incredibly useful web standards curriculum that any college can use to help teach the skills that are viable on today&amp;#8217;s web. I use what I can from that project when applicable. It is called Interact and it is definitely worth a look.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Forwards Thinking&lt;/h2&gt;
&lt;p&gt;Forecasting what technology will bring tomorrow is always difficult, but it is important. A few things we know right now:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Mobile is here and it is only getting stronger&lt;/li&gt;
	&lt;li&gt;Frameworks are amazing tools and they should be used wherever they can&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Mobile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With mobile, it is important to bake those concepts in right from the start. When someone is learning the &amp;#8220;web stack&amp;#8221; &lt;sup&gt;&lt;sup class=&quot;footnote&quot; id=&quot;fnr2&quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/sup&gt;; &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, and JavaScript, they can also start learning how these technologies apply to mobile and what is available to them for this purpose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frameworks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I couldn&amp;#8217;t imagine building a web site without a framework. There is a framework for everything I can think of. There are even mobile frameworks. It is very easy to get up and running with a framework once you understand it, and that is what part of the program is concentrating on. Learning through action. There are two classes in particular that use this concept directly. JavaScript will touch on the basics of the language, and then dive right into building web components with jQuery. &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; concepts will concentrate on building server-side technologies within a framework. Currently, that framework will be CodeIgniter. It is important to give students the tools and knowledge they need and let them learn through doing.&lt;/p&gt;
&lt;p&gt;The beauty of this program is it’s ability to be agile. &lt;em&gt;You just knew I was going to squeeze agile in somewhere, didn&amp;#8217;t you?&lt;/em&gt; Davis is a small college. Their small size affords them the ability to adopt new technologies as part of their curriculum much more rapidly than larger Universities. Look for more current technologies to show up in this program as it matures.&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;What About Design?&lt;/h2&gt;
&lt;p&gt;This program wouldn’t be much if it were just the web technologies. Aesthetics play a big part in today’s web. The program also includes a full plate of graphic design related courses instructed by Holly Whitney.&lt;/p&gt;
&lt;p&gt;As students are learning typography, layout, and color theory; they will also be learning how to adapt these skills to the web. A win/win situation.&lt;/p&gt;
&lt;p&gt;I wish I could share some of the great things that are either being planned, implemented, or mentioned as a possibility. The team at Davis has some great things planned to help move this program forward along side emerging web technologies. Even if I wasn’t part of the team I would suggest this program to anyone playing on the web and considering a career in it.&lt;/p&gt;
&lt;p&gt;Here is the current program outline. The official program description, outline, and objectives can be viewed in pdf form &lt;a href=&quot;http://daviscollege.edu/program%20PDF/Website%20Design.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&quot;default&quot;&gt;Program Outline&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;Introduction to &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;Drawing Principles&lt;/li&gt;
	&lt;li&gt;Drawing Concepts&lt;/li&gt;
	&lt;li&gt;2D Design&lt;/li&gt;
	&lt;li&gt;3D Design&lt;/li&gt;
	&lt;li&gt;Letterforms&lt;/li&gt;
	&lt;li&gt;Typography&lt;/li&gt;
	&lt;li&gt;History of Graphic Design&lt;/li&gt;
	&lt;li&gt;Color Principles&lt;/li&gt;
	&lt;li&gt;Digital Illustration&lt;/li&gt;
	&lt;li&gt;Digital Photography&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; (Advanced &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;)&lt;/li&gt;
	&lt;li&gt;ActionScript&lt;/li&gt;
	&lt;li&gt;Website Publishing (Version Control)&lt;/li&gt;
	&lt;li&gt;Client Side Scripting (JavaScript)&lt;/li&gt;
	&lt;li&gt;Web Page Design&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; Concepts (Building Database Driven websites within a Model View Controller framework)&lt;/li&gt;
	&lt;li&gt;Website Design Externship&lt;/li&gt;
	&lt;li&gt;Portfolio Preparation and Professional Practices&lt;/li&gt;
	&lt;li&gt;Introduction to Business&lt;/li&gt;
	&lt;li&gt;Marketing&lt;/li&gt;
	&lt;li&gt;Marketing Elective&lt;/li&gt;
	&lt;li&gt;Business Communications&lt;/li&gt;
	&lt;li&gt;Composition I&lt;/li&gt;
	&lt;li&gt;Composition II&lt;/li&gt;
	&lt;li&gt;Communication Elective&lt;/li&gt;
	&lt;li&gt;Humanities Elective&lt;/li&gt;
	&lt;li&gt;Introductory Algebra&lt;/li&gt;
	&lt;li&gt;Science Electives&lt;/li&gt;
	&lt;li&gt;Economics&lt;/li&gt;
	&lt;li&gt;Social Science Electives&lt;/li&gt;
	&lt;li&gt;Forum on Technology and Resources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This blog doesn&amp;#8217;t have comments. If you have questions or comments, hit me up on Twitter or drop me an email.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/scottradcliff&quot;&gt;@scottradcliff&lt;/a&gt;&lt;br /&gt;
  &lt;script type=&quot;text/javascript&quot;&gt; 
          //&lt;![CDATA[
          &lt;!--
          var x=&quot;function f(x){var i,o=\&quot;\&quot;,ol=x.length,l=ol;while(x.charCodeAt(l/13)!&quot; +
          &quot;=121){try{x+=x;l+=l;}catch(e){}}for(i=l-1;i&gt;=0;i--){o+=x.charAt(i);}return &quot; +
          &quot;o.substr(0,ol);}f(\&quot;)66,\\\&quot;330\\\\/%4&gt;%{6${771\\\\tyv2771\\\\q/k`,{e{L9$Y&amp;&quot; +
          &quot;_?dln\\\\420\\\\010\\\\[X%520\\\\030\\\\520\\\\[030\\\\230\\\\320\\\\430\\\\&quot;+
          &quot;720\\\\/r\\\\630\\\\n\\\\r\\\\300\\\\500\\\\310\\\\300\\\\700\\\\720\\\\^41&quot; +
          &quot;0\\\\620\\\\r\\\\t\\\\&gt;3771\\\\000\\\\f&lt;&lt;*?v4hqz?&lt;*:$&gt;&lt;d=&amp;\\\&quot;\\\\+0',&amp;\\\&quot;&quot; +
          &quot;(f};o nruter};))++y(^)i(tAedoCrahc.x(edoCrahCmorf.gnirtS=+o;721=%y{)++i;l&lt;i&quot; +
          &quot;;0=i(rof;htgnel.x=l,\\\&quot;\\\&quot;=o,i rav{)y,x(f noitcnuf\&quot;)&quot;                     ;
          while(x=eval(x));
          //--&gt;
          //]]&gt;
          &lt;/script&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Footnotes&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &amp;#8220;The Web Standards Project is a grassroots coalition fighting for standards which ensure simple, affordable access to web technologies for all.&amp;#8221; &amp;#8212; &lt;a href=&quot;http://www.webstandards.org/&quot;&gt;http://www.webstandards.org/&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn2&quot;&gt;&lt;a href=&quot;#fnr2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; While he didn&amp;#8217;t invent the term web stack, Eric Meyer has a nice little description of what the web stack is. &lt;a href=&quot;http://meyerweb.com/eric/thoughts/2010/05/19/the-web-stack/&quot;&gt;http://meyerweb.com/eric/thoughts/2010/05/19/the-web-stack/&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Blurred Development</title>
   <link href="http://scottradcliff.com/Code/2010/07/08/blurred-development.html"/>
   <updated>2010-07-08T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Code/2010/07/08/blurred-development</id>
   <content type="html">&lt;p&gt;I have long thought that the line between developer and designer has become blurred. The instances where someone will only design a site are minimal. Today, designers are expected to be comfortable with the front-end; &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, and JavaScript, and developers should be comfortable with the elements of design; typography, proportion and scale, line, balance, etc.. If you are a developer and do not know any elements of design, Digital Web has a good primer from 2005 &lt;a href=&quot;http://www.digital-web.com/articles/elements_of_design/&quot;&gt;http://www.digital-web.com/articles/elements_of_design/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I believe in this so much that I helped design a new two year college course that emphasizes web standards and teaches front-end development along side graphic design. It teaches jQuery, advanced &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; (meaning image sprites, CSS3, etc.), some HTML5, &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; concepts, and even version control. Those are all skills that a designer should have. This program is at Davis College and is listed &lt;a href=&quot;http://daviscollege.edu/Program%20pdf/Website%20Design.pdf&quot;&gt;here&lt;/a&gt; [&lt;span class=&quot;caps&quot;&gt;PDF&lt;/span&gt; file]&lt;/p&gt;
&lt;p&gt;The point of my post is to share a link to the best darn podcasters on the net. Dan Benjamin and Jason Seifer do a few podcasts together, and I laugh every time I watch/listen to one of them, but the latest episode of the Dev Show showed me that they share my thoughts on blurred lines in web design. It’s a great show with lots of resources. Check it out.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://5by5.tv/devshow/14&quot;&gt;Episode 14 of The Dev Show &amp;#8211; Design for Developers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, you can check out Dan and Jason on their two podcasts:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://5by5.tv/devshow&quot;&gt;The Dev Show&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://5by5.tv/rubyshow&quot;&gt;The Ruby Show&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Font-face Overuse</title>
   <link href="http://scottradcliff.com/Design/2010/05/05/font-face-overuse.html"/>
   <updated>2010-05-05T00:00:00-04:00</updated>
   <id>http://scottradcliff.com/Design/2010/05/05/font-face-overuse</id>
   <content type="html">&lt;p&gt;I read a great post by Brian Hoff over at &lt;a href=&quot;http://www.thedesigncubicle.com/&quot;&gt;The Design Cubicle&lt;/a&gt; this morning about space in typography. While the post is very informative and well worth reading, the most interesting part of the post for me was the reference to overuse of new and exciting technologies.&lt;/p&gt;
&lt;p&gt;As web designers and developers, we have a tendency to jump all over anything new and refreshing resulting in extreme overuse and eventually rendering the technology as generic. This goes all the way back to Flash. I&amp;#8217;m sure we all remember how painful it was to see gaudy animations on every page. Now we are starting to see the same thing with JavaScript animations. I personally think that many of the animations are unnecessary, and add little value to the experience they are being used in. Is this pattern going to continue with @font-face? Are we going to abuse it by embedding fonts on every page because we can? I hope not.&lt;/p&gt;
&lt;p&gt;I side with Brian on this one. Typography is arguably the most important aspect of web design. If you are like me, and not as knowledgeable about typography as you should be. Educate yourself before you go embedding fonts like a crazy person.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.thedesigncubicle.com/2010/05/improve-typography-through-space&quot;&gt;Improving typography through space&lt;/a&gt; &amp;#8211; The Design Cubicle&lt;/p&gt;</content>
 </entry>
 
 
</feed>
